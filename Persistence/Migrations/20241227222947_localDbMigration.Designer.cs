// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.DatabaseContext;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(PersistenceDbContext))]
    [Migration("20241227222947_localDbMigration")]
    partial class localDbMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entity.Carbohydrate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("Fiber")
                        .HasColumnType("real");

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<float?>("Starch")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("FoodId")
                        .IsUnique();

                    b.ToTable("Carbohydrates");
                });

            modelBuilder.Entity("Domain.Entity.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Benefits")
                        .HasColumnType("text");

                    b.Property<float?>("Caffeine")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("History")
                        .HasColumnType("text");

                    b.Property<string>("ImageName")
                        .HasColumnType("text");

                    b.Property<float?>("KCal")
                        .HasColumnType("real");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameTr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float?>("Nitrogen")
                        .HasColumnType("real");

                    b.Property<float?>("Portion")
                        .HasColumnType("real");

                    b.Property<string>("PortionUnit")
                        .HasColumnType("text");

                    b.Property<float?>("Protein")
                        .HasColumnType("real");

                    b.Property<float?>("Water")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NameTr")
                        .IsUnique();

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("Domain.Entity.Lipid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float?>("Cholesterol")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<float?>("Saturated")
                        .HasColumnType("real");

                    b.Property<float?>("Trans")
                        .HasColumnType("real");

                    b.Property<float?>("Unsaturated")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("FoodId")
                        .IsUnique();

                    b.ToTable("Lipids");
                });

            modelBuilder.Entity("Domain.Entity.Mineral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float?>("Calcium")
                        .HasColumnType("real");

                    b.Property<float?>("Copper")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<float?>("Iron")
                        .HasColumnType("real");

                    b.Property<float?>("Magnesium")
                        .HasColumnType("real");

                    b.Property<float?>("Manganese")
                        .HasColumnType("real");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<float?>("Phosphorus")
                        .HasColumnType("real");

                    b.Property<float?>("Potassium")
                        .HasColumnType("real");

                    b.Property<float?>("Selenium")
                        .HasColumnType("real");

                    b.Property<float?>("Sodium")
                        .HasColumnType("real");

                    b.Property<float?>("Zinc")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("FoodId")
                        .IsUnique();

                    b.ToTable("Minerals");
                });

            modelBuilder.Entity("Domain.Entity.Sugar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CarbohydrateId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("Fructose")
                        .HasColumnType("real");

                    b.Property<float?>("Galactose")
                        .HasColumnType("real");

                    b.Property<float?>("Glucose")
                        .HasColumnType("real");

                    b.Property<float?>("Lactose")
                        .HasColumnType("real");

                    b.Property<float?>("Maltose")
                        .HasColumnType("real");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<float?>("Sucrose")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CarbohydrateId")
                        .IsUnique();

                    b.ToTable("Sugars");
                });

            modelBuilder.Entity("Domain.Entity.Vitamin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text");

                    b.Property<float?>("VitaminA")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminA1")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminA2")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB1")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB12")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB2")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB3")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB5")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB6")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB7")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminB9")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminC")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminD")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminD3")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminE")
                        .HasColumnType("real");

                    b.Property<float?>("VitaminK")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("FoodId")
                        .IsUnique();

                    b.ToTable("Vitamins");
                });

            modelBuilder.Entity("Domain.Entity.Carbohydrate", b =>
                {
                    b.HasOne("Domain.Entity.Food", null)
                        .WithOne("Carbohydrate")
                        .HasForeignKey("Domain.Entity.Carbohydrate", "FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entity.Lipid", b =>
                {
                    b.HasOne("Domain.Entity.Food", null)
                        .WithOne("Fat")
                        .HasForeignKey("Domain.Entity.Lipid", "FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entity.Mineral", b =>
                {
                    b.HasOne("Domain.Entity.Food", null)
                        .WithOne("Mineral")
                        .HasForeignKey("Domain.Entity.Mineral", "FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entity.Sugar", b =>
                {
                    b.HasOne("Domain.Entity.Carbohydrate", null)
                        .WithOne("Sugar")
                        .HasForeignKey("Domain.Entity.Sugar", "CarbohydrateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entity.Vitamin", b =>
                {
                    b.HasOne("Domain.Entity.Food", null)
                        .WithOne("Vitamin")
                        .HasForeignKey("Domain.Entity.Vitamin", "FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entity.Carbohydrate", b =>
                {
                    b.Navigation("Sugar")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entity.Food", b =>
                {
                    b.Navigation("Carbohydrate")
                        .IsRequired();

                    b.Navigation("Fat")
                        .IsRequired();

                    b.Navigation("Mineral")
                        .IsRequired();

                    b.Navigation("Vitamin")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
